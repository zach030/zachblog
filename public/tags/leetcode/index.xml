<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on ZachBlog</title>
    <link>http://zachless.design/tags/leetcode/</link>
    <description>Recent content in leetcode on ZachBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Thu, 14 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://zachless.design/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode-3 无重复字符最长字串</title>
      <link>http://zachless.design/post/leetcode_3/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/leetcode_3/</guid>
      <description>无重复字符最长子串  给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度
 示例
 输入: s = &amp;ldquo;abcabcbb&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。
 滑动窗口题目的模板 根据模板，可以看出滑动窗口可分为向右扩大窗口，和从左边缩小窗口
left,right :=0,0 for right &amp;lt; len(str){ // 向右扩大窗口  window[str[right]]++ right++ // 从左边起缩小窗口  for window need shrink { delete(window, str[left]) left++ } } 思路 使用左右指针控制子串边界，检验是否有重复元素可通过map来实现，关键点是当发现重复元素时，左右指针该如何移动
测试用例
 abcabcbb
  当 left=0,right=2 时，子串为 abc 满足无重复条件 right 再向后移动，遇到元素 a，通过map的校验可以发现出现重复元素 此时 left 需要移动，终止条件就是[left,right]区间内无重复元素，而可能的重复元素就是right所指向的元素  因此可以写出窗口收缩的部分代码
// rightChar: right指针所指向的元素，当前窗口内的重复元素  // 窗口收缩代码  for window[rightChar]&amp;gt;1{ leftChar := s[left] window[leftChar]-- left++ } 题解 LeetCode-3</description>
    </item>
    
    <item>
      <title>Leetcode-DailyCode</title>
      <link>http://zachless.design/post/leetcode_210119/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/leetcode_210119/</guid>
      <description>删除排序链表中的重复元素  存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字
 链表删除元素，一定是需要记录指针的next和next.next或双指针，通过改变next指针来完成删除操作。在遍历链表的循环内部还需要一个for循环，来跳过重复的元素，示例如下：
 1 &amp;ndash;&amp;gt; 2 &amp;ndash;&amp;gt; 3 &amp;ndash;&amp;gt; 3 &amp;ndash;&amp;gt; 4 &amp;ndash;&amp;gt; 4 &amp;ndash;&amp;gt; 5
 curr指针指向head的前一个假头指针，判断curr.next(1)与curr.next.next(2)不相等，因此curr向后递推，当curr指向2时，发现next与next.next都为3，需要删除重复元素，因此进入内嵌循环，当curr.val!=3，通过循环后curr指向4，同理4也会跳过，最后指向5，因此最后得到链表：
 1 &amp;ndash;&amp;gt; 2 &amp;ndash;&amp;gt; 5
 tips 在操作链表时，通常需要一个虚拟的假头节点
dummy := ListNode{Next:head} // val不重要，重点在将next指针指向head  ... return dummy.Next 题解 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func deleteDuplicates(head *ListNode) *ListNode { if head == nil { return nil } dummy := &amp;amp;ListNode{Next: head} curr := dummy for curr.</description>
    </item>
    
  </channel>
</rss>
