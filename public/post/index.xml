<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZachBlog</title>
    <link>http://zachless.design/post/</link>
    <description>Recent content in Posts on ZachBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Mon, 15 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://zachless.design/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TinyKV Project-1</title>
      <link>http://zachless.design/post/tinykv/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/tinykv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>日常-方法论</title>
      <link>http://zachless.design/post/methodlogy/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/methodlogy/</guid>
      <description>Less is More.
 由于信息来源众多，市面上也有诸多 Best Practice ，在此记录一下我日常生活中认为有效、将持续践行的一些方法论
1. 信息源的输入 信息源的统一入口可以分为：
Flomo：记录零碎的idea，待办
Cubox：长文本、各平台文章汇总的收藏夹
2. 日程处理 养成习惯一定是非常困难且反人类的，在前期需要使用强提醒来管理自己
滴答清单：TODO待办事项汇总
3. 知识输出 飞书文档：有体系的总结、笔记等知识
博客：基于文档的知识的汇总与归纳</description>
    </item>
    
    <item>
      <title>走入分布式系统</title>
      <link>http://zachless.design/post/distributed_system/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/distributed_system/</guid>
      <description>对于分布式的认识 大二暑假开始实习，接触到工业级的开发，摆脱了学校里vc6.0的黑框框。 从开始做服务的接口开发，到数据模型的设计，业务架构的设计。接触更多的业务层面的开发，对我而言是一个自顶向下的发展方向，后期也逐步学习了存储、RPC、消息队列等中间件。
综合考虑业务体量与实际需求，并没有过早涉及到分布式，记得在看MIT 6.824的课程时，老师就曾说过：能不要分布式就不要分布式（:&amp;gt;可能是类似的意思）
在我的理解里，分布式系统中重要的影响因素有：
 可靠性：网络是否可靠，调用是否超时，数据是否丢失 一致性：多节点之间如何保证一致性，强一致性，最终一致性？  与传统的单机架构相比，一旦涉及到更多的状态可能性，考虑更多的因素，开发难度一定会陡然增加
发展方向与目标 伴随业务发展，需要对现有架构做升级
 master：基于etcd做元数据管理与资源调度中心 proxy：兼容现有的各种API，做统一化管理 partition：分布式KV存储  参考的项目：
 vearch 分布式向量检索系统，参考架构设计 elasticsearch 检索引擎 baikaldb 分布式数据库 tao 图存储实现  </description>
    </item>
    
    <item>
      <title>Leetcode-3 无重复字符最长字串</title>
      <link>http://zachless.design/post/leetcode_3/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/leetcode_3/</guid>
      <description>无重复字符最长子串  给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度
 示例
 输入: s = &amp;ldquo;abcabcbb&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。
 滑动窗口题目的模板 根据模板，可以看出滑动窗口可分为向右扩大窗口，和从左边缩小窗口
left,right :=0,0 for right &amp;lt; len(str){ // 向右扩大窗口  window[str[right]]++ right++ // 从左边起缩小窗口  for window need shrink { delete(window, str[left]) left++ } } 思路 使用左右指针控制子串边界，检验是否有重复元素可通过map来实现，关键点是当发现重复元素时，左右指针该如何移动
测试用例
 abcabcbb
  当 left=0,right=2 时，子串为 abc 满足无重复条件 right 再向后移动，遇到元素 a，通过map的校验可以发现出现重复元素 此时 left 需要移动，终止条件就是[left,right]区间内无重复元素，而可能的重复元素就是right所指向的元素  因此可以写出窗口收缩的部分代码
// rightChar: right指针所指向的元素，当前窗口内的重复元素  // 窗口收缩代码  for window[rightChar]&amp;gt;1{ leftChar := s[left] window[leftChar]-- left++ } 题解 LeetCode-3</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>http://zachless.design/post/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>http://zachless.design/post/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes&#34;&gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;&gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>http://zachless.design/post/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://zachless.design/post/dapr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/dapr/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://zachless.design/post/internships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/internships/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
