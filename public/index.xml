<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZachBlog</title>
    <link>http://zachless.design/</link>
    <description>Recent content on ZachBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Sun, 09 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://zachless.design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build KV Engine With Me-01</title>
      <link>http://zachless.design/post/know-about-octopusdb/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/know-about-octopusdb/</guid>
      <description>什么是KV分离，为什么需要KV分离 如何实现KV分离 KV分离带来的难点 OctopusDB是怎么做的 </description>
    </item>
    
    <item>
      <title>学会表达</title>
      <link>http://zachless.design/post/how-to-express/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/how-to-express/</guid>
      <description>How to express 我一直认为无法清楚表达自己的想法是一个弱点。
我常常就是脑袋里想法很多，但是到要说出来，发表出来的时候就很一时语塞，不知如何组织语言，觉得只言片语无法清楚的阐述内心想法，话一多又觉得扯得太远，偏离核心。
其实在 2020 年刚开始实习的时候，在 leader 的推荐下阅读了《金字塔理论》，读过的书就是水一样流逝，如今令我记忆深刻的点也只剩下：说话先说结论，分点陈述（这个点也缺少上下文，或许有失偏颇）。这本书值得再读，尤其在正式进去工作之后。
 知乎回答 如何表达？ 分块解决 （Divide and Conquer）和逻辑链 ( Chain )
 简而言之：先分块，再对每一块分点阐述。整个逻辑思维是比较简单的，重点就是在日常生活中锻炼自己的语言组织表达能力。
 先说论点，再说逻辑：对于听者/读者而言，是带着论点去读逻辑，是一种主动参与论证的过程 每次要把想法表达出来时：按照固定的格式在心里梳理一遍   结论：XXX; 理由：原因1：; 原因2：; ……; 原因N：
 总结  先说论点，再分块，分点阐述 形成：结论--&amp;gt;原因 的思维格式 再好好读下《金字塔理论》  </description>
    </item>
    
    <item>
      <title>经济学原理-01</title>
      <link>http://zachless.design/post/economic-theory/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/economic-theory/</guid>
      <description>经济学的三类问题  这三类问题涵盖了由微观到宏观经济学
  人们如何做决策 How People Make Decisions 人们如何相互作用 How People Interact 整体经济如何运行 How the Economy as a Whole Works  人们如何做决策  权衡 tradeoffs  看问题不是单点，多视角权衡   成本 cost  某物的成本是为此放弃的东西，区别于直接的生产成本   边际 margin  细小的变化引起的变化   激励 incentives  人们对激励做出反应    人们如何相互作用  交易 trade  交易使得双方受益   市场 market  市场通常是组织经济的好方式，“invisble hand”   政府 government  政府可以改进市场    整体经济如何运行  生产 production  由生产率衡量，高生产率&amp;ndash;&amp;gt;高生产水平   货币 money 通胀与失业 inflation and unemployment  经济中整体物价水平的上升    </description>
    </item>
    
    <item>
      <title>Dapr学习笔记</title>
      <link>http://zachless.design/post/dapr/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/dapr/</guid>
      <description>Dapr学习笔记 首先将从dapr的整体架构入手，再逐个模块进行深入源码的分析，一起深入Runtime的世界！</description>
    </item>
    
    <item>
      <title>TinyKV Project-1</title>
      <link>http://zachless.design/post/tinykv/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/tinykv/</guid>
      <description></description>
    </item>
    
    <item>
      <title>日常-方法论</title>
      <link>http://zachless.design/post/methodlogy/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/methodlogy/</guid>
      <description>Less is More.
 由于信息来源众多，市面上也有诸多 Best Practice ，在此记录一下我日常生活中认为有效、将持续践行的一些方法论
1. 信息源的输入 信息源的统一入口可以分为：
Flomo：记录零碎的idea，待办
Cubox：长文本、各平台文章汇总的收藏夹
2. 日程处理 养成习惯一定是非常困难且反人类的，在前期需要使用强提醒来管理自己
滴答清单：TODO待办事项汇总
3. 知识输出 飞书文档：有体系的总结、笔记等知识
博客：基于文档的知识的汇总与归纳</description>
    </item>
    
    <item>
      <title>走入分布式系统</title>
      <link>http://zachless.design/post/distributed_system/</link>
      <pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/distributed_system/</guid>
      <description>对于分布式的认识 大二暑假开始实习，接触到工业级的开发，摆脱了学校里vc6.0的黑框框。 从开始做服务的接口开发，到数据模型的设计，业务架构的设计。接触更多的业务层面的开发，对我而言是一个自顶向下的发展方向，后期也逐步学习了存储、RPC、消息队列等中间件。
综合考虑业务体量与实际需求，并没有过早涉及到分布式，记得在看MIT 6.824的课程时，老师就曾说过：能不要分布式就不要分布式（:&amp;gt;可能是类似的意思）
在我的理解里，分布式系统中重要的影响因素有：
 可靠性：网络是否可靠，调用是否超时，数据是否丢失 一致性：多节点之间如何保证一致性，强一致性，最终一致性？  与传统的单机架构相比，一旦涉及到更多的状态可能性，考虑更多的因素，开发难度一定会陡然增加
发展方向与目标 伴随业务发展，需要对现有架构做升级
 master：基于etcd做元数据管理与资源调度中心 proxy：兼容现有的各种API，做统一化管理 partition：分布式KV存储  参考的项目：
 vearch 分布式向量检索系统，参考架构设计 elasticsearch 检索引擎 baikaldb 分布式数据库 tao 图存储实现  </description>
    </item>
    
    <item>
      <title>Leetcode-3 无重复字符最长字串</title>
      <link>http://zachless.design/post/leetcode_3/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/leetcode_3/</guid>
      <description>无重复字符最长子串  给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度
 示例
 输入: s = &amp;ldquo;abcabcbb&amp;rdquo; 输出: 3 解释: 因为无重复字符的最长子串是 &amp;ldquo;abc&amp;rdquo;，所以其长度为 3。
 滑动窗口题目的模板 根据模板，可以看出滑动窗口可分为向右扩大窗口，和从左边缩小窗口
left,right :=0,0 for right &amp;lt; len(str){ // 向右扩大窗口  window[str[right]]++ right++ // 从左边起缩小窗口  for window need shrink { delete(window, str[left]) left++ } } 思路 使用左右指针控制子串边界，检验是否有重复元素可通过map来实现，关键点是当发现重复元素时，左右指针该如何移动
测试用例
 abcabcbb
  当 left=0,right=2 时，子串为 abc 满足无重复条件 right 再向后移动，遇到元素 a，通过map的校验可以发现出现重复元素 此时 left 需要移动，终止条件就是[left,right]区间内无重复元素，而可能的重复元素就是right所指向的元素  因此可以写出窗口收缩的部分代码
// rightChar: right指针所指向的元素，当前窗口内的重复元素  // 窗口收缩代码  for window[rightChar]&amp;gt;1{ leftChar := s[left] window[leftChar]-- left++ } 题解 LeetCode-3</description>
    </item>
    
    <item>
      <title>Leetcode-DailyCode</title>
      <link>http://zachless.design/post/leetcode_210119/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/leetcode_210119/</guid>
      <description>删除排序链表中的重复元素 https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg
 存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字
 链表删除元素，一定是需要记录指针的next和next.next或双指针，通过改变next指针来完成删除操作。在遍历链表的循环内部还需要一个for循环，来跳过重复的元素，示例如下：
 1 &amp;ndash;&amp;gt; 2 &amp;ndash;&amp;gt; 3 &amp;ndash;&amp;gt; 3 &amp;ndash;&amp;gt; 4 &amp;ndash;&amp;gt; 4 &amp;ndash;&amp;gt; 5
 curr指针指向head的前一个假头指针，判断curr.next(1)与curr.next.next(2)不相等，因此curr向后递推，当curr指向2时，发现next与next.next都为3，需要删除重复元素，因此进入内嵌循环，当curr.val!=3，通过循环后curr指向4，同理4也会跳过，最后指向5，因此最后得到链表：
 1 &amp;ndash;&amp;gt; 2 &amp;ndash;&amp;gt; 5
 tips 在操作链表时，通常需要一个虚拟的假头节点
dummy := ListNode{Next:head} // val不重要，重点在将next指针指向head  ... return dummy.Next 题解 /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func deleteDuplicates(head *ListNode) *ListNode { if head == nil { return nil } dummy := &amp;amp;ListNode{Next: head} curr := dummy for curr.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://zachless.design/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>http://zachless.design/post/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rich Content</title>
      <link>http://zachless.design/post/rich-content/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/rich-content/</guid>
      <description>&lt;p&gt;Hugo ships with several &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/#use-hugos-built-in-shortcodes&#34;&gt;Built-in Shortcodes&lt;/a&gt; for rich content, along with a &lt;a href=&#34;https://gohugo.io/about/hugo-and-gdpr/&#34;&gt;Privacy Config&lt;/a&gt; and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Math Typesetting</title>
      <link>http://zachless.design/post/math-typesetting/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/math-typesetting/</guid>
      <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://zachless.design/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/about/</guid>
      <description>Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
 https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://zachless.design/post/internships/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://zachless.design/post/internships/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
